# 23-03-28
---
## class, instance, object
- class 는 object의 설계도이다.
- instance는 class를 구현한 실체이다.
- instance는 object에 포함된다고 볼 수 있다.
- 구현되어야 할 것이 object이고, object를 구현하기 위해 설계한 묶음을 class라 하며, 실제로 구현되어 기능을 하는것을 instance라 한다.
- 현실과 소프트웨어의 세계를 나눠서 현실세계에서 인지 가능한 대상(object)이 소프트웨어 세계에서 구현하여 실체가 되는것은 instance이다.
- object는 대상, instance는 object를 소프트웨어세계 시선으로 해석한것. 둘 다 object가 될 수 있다. 만들어진 object를 소프트웨어 시점으로 실체화 한 것이 instance이다.

## class
- 클래스는 필드와 메소드를 가짐
- 필드는 클래스의 속성. 메소드는 클래시의 기능이라고 말할 수 있음.

## class 선언
- class 앞에는 접근제한자{public, protected, private, 안씀(default)}가 붙음
- class 다음에는 클래스 이름{} 이 나옴.
- 첫 문자가 문자나’_’, ‘$’의 특수문자로 시작 되어야함 숫자로 시작 불가
- JDK8에서는 ‘_’ 한글자로 이뤄진 변수는 예약어로 정의되어 있기 때문에 사용 불가
접근제한자 class 클래스이름{
				필드들;
				생성자들;
				메소드들;
}

## 클래스의 인스턴스 만들기
VendingMachine vm1 = new VendingMachine();
클래스명 변수명 = new 클래스명();
참조타입 참조변수  new연산자 생성자
- 3가지 방법이 있음
1. new 연산자와 생성자를 이용하여 인스턴스를 만드는 방법
2. 클래스 로더를 이용하는 방법
3. 메모리에 있는 인스턴스를 복제하여 만드는 방법
- 인스턴스가 필요한 갯수를 구하고 필요한 인스턴스만 생성해야함.

## 메소드 선언 방법
[접근제한자] [static] 리턴type 메소드이름([매개변수,...]){
		실행문
}
ex) main 메소드
public static void main(String[] agrs){
}
- 매개변수(parameter)는 메소드의 정의부분에 나열되어 있는 변수들
- 전달인자(argument)는 메소드를 호출할때 전달되는 실제 값
- 리턴type이 void라면 리턴하지 않는다는 의미
- static 메소드는 인스턴스화 하지 않아도 사용 가능함
VendingMachine vm2 = new VendingMachine();
static이 없는 메소드는 이렇게 인스턴스를 만들어야 하지만
public static void printVersion(){}
이런식으로 메소드 선언할 때 static을 넣어주면 인스턴스를 생성하지 않아도 활용 가능함.
VendingMachine.printVersion();
- static 메소드는 참조형 변수명을 적는것이 아닌 클래스 이름을 적고 메소드를 실행해야함