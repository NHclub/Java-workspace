# 23-03-23 (인프런 즐거운 자바)
---
## IDE
- IDE(통합 개발 환경)은 코딩, 디버그, 컴파일, 배포등 프로그램 개발에 관련된 모든 작업을 하나의 프로그램안에서 처리하는 환경을 제공하는 소프트웨어이다.

## 기본형 타입
단어의 첫 번째 글자가 모두 소문자, 모두 크기를 갖고 있음, 정해진 크기의 메모리를 확보하고 값을 가짐.
바이트에 따라 들어갈 수 있는 수의 범위 구하는 공식:
1byte는 8bit이기 때문에 1byte는 8bit만큼의 이진수가 들어갈 수 있음
공식: n byte = -(2^n-1) ~ (2^n-1) -1
1. byte: 1byte 크기 (범위: -128 ~ 127)
2. short: 2byte 크기 (범위: -32768 ~ 32767)
3. int: 4byte 크기 (범위: -2147483648 ~ 2147483647 21억)
4. long: 8byte 크기 (범위: -9223372036854775808 ~ 9223372036854775807 900경 )
5. float: 4byte 크기 (범위: (3.4 * 10^-38) ~ (3.4*10^38))
6. double: 8byte 크기 (범위: (1.7 * 10^-308) ~ (1.7 * 10^308))
7. char: 2byte 크기 
8. boolean(true, false): 1byte 크기

## 참조형 타입(레퍼런스 타입)
기본형 타입이 아닌 것은 전부 참조형 타입, 첫번쨰 글자는 대문자, 값을 참조함.

## 변수 선언
- 타입 변수명 = 값(리터럴) ; 형식으로 작성
- 변수에 저장되는 데이터(값) 을 리터럴이라 부름
- 변수 선언 후 아무 값도 대입해 주지 않으면 정수타입은 0을 가짐
int x;
int y;
int z;
int i = 5, j = 10, k = 15;

## System.out.println()
- out은 System이란 클래스가 가진 필드 중 하나
- 필드란 클래스가 갖고있는 목록들
- 메소드란 필드가 실행 할 수 있는 기능들

## While 반복문
//너비가 별 10개, 높이가 별 10개인 사각형을 출력한다.
int i = 1;
while (i <= 1000){
System.out.println("**********");
i = i+1;
}


## ture 와 false 가 나오는 식
- 비교연산자와 논리연산자를 이용한 식의 결과는 참이나 거짓이 결과로 나옴
- 비교연산자: ==, !=, <, >, <=, >=
- 논리연산자: &&(and), ||(or), &(and), |(or), ^(exclusive-or 또는 XOR), !
- XOR: 2개의 식이 논리 값이 서로 다를 경우 참이 된다.
a > 10 ^ a < 20 // a가 31이라는 값을 가질 경우 true & false 가 되니 결과는 참이 나온다
- && 와 & 의 차이는 &가 2개일땐 먼저 실행하는 식이 거짓이면 뒤의 식은 무시함 &가 1개일땐 식을 전부 실행 ||도 마찬가지

## 정수형타입
- byte, short, int, long 타입이 있음
- 자바에서 숫자는 기본적으로 int로 인식하기에 long 타입은 선언 할 때 숫자 뒤에 L을 붙여줘야 함

## 실수형 타입
- float(4byte), double(8byte) 이 있음
- 자바는 실수는 double로 인식하기에 float로 선언 할 때엔 숫자뒤에 F를 붙여줘야함
- float는 소수 7번째까지 출력가능, double은 16번째 까지 출력 가능.
- float는 소수 6번째까지, double은 소수 15번째까지 오차 없이 표현.

## 산술 연산자
a = 5 + 4;
b = 4 - 3;
c = 3 * 2;
d = 5 / 2; // 2.5 가 아닌 소수점은 버리고 2만 저장됨.
e = 4 % 3; // 나머지 값

## 증가 연산자와 감소 연산자
- 증가 연산자(++)를 사용하면 1이 증가된다.
- 감소 연산자(--)를 사용하면 1이 감소된다.
- 증감 연산자 앞에 증감이 붙었냐 뒤에 붙었냐에 따라 전위 후위 증감 연산자로 나뉨
- 전위형은 값이 참조되기 전에 증가시킴.
- 후위형은 값이 참조된 후에 증가시킴.
- 독립적으로 사용된 경우 전위형과 후위형의 차이가 없음
- 헷갈릴땐 분리해서 계산하면 이해하기 쉬움
j = ++i; // ++i;를 먼저 실행 한 후 j = i 실행
j = i++; // j = i 를 실행 한 후 i++ 실행

## 오버플로우
- 계산 결과가 최댓값을 넘거나, 최솟값보다 작을 경우 음수는 양수로, 양수는 음수로 바뀌는 문제가 발생하는데 이를 오버플로우라고 함.
- 자료구조를 학습하면 이해하는데 도움이 됨