# 23-04-05 (인프런 즐거운 자바)
---
## 깊은복사와 얕은복사
- 깊은복사는 한 인스턴스 그 자체를 그대로 복사해서 인스턴스를 하나 더 만든다는 개념. 인스턴스의 값을 그대로 가져오기만 한 독립적인 인스턴스가 하나 더 생긴 것이기에 다형성을 부여하거나 재정의가 가능하다.
- 얕은복사는 한 인스턴스의 주소를 참조하는것. 참조하는것이 같기에 값은 같지만 참조하고 있는 인스턴스의 값이 변경되면 얕은복사를 한 인스턴스도 값이 변경되어 종속적인 관계이다.

## 자바 유틸에 있는 Arrays 클래스의 메소드
- Arrays.copyOfRange(배열1,시작 인덱스, 종료 인덱스); 깊은복사이며, 시작인덱스부터 종료인덱스 -1까지 복사하는 것.
- Arrays.compare(배열1,배열2) 배열 1이 크면 양수 배열 2가 크면 음수 같으면 0이 출력되는 비교해주는 메소드. 인덱스순으로 대응하면서 값이 더 큰 쪽으로 출력됨
//Exam
int[] array1 = {1,4,2}
int[] array2 = {1,3,9) // 1번째 인덱스가 array1이 4로 더 크기 때문에 양수1이 나옴
- Arrays.sort(배열); 오름차순으로 배열을 정렬해줌.
- Arrays.binarySearch(배열,값); 정렬된 배열에서 값을 찾아 그 값의 인덱스번호를 출력하는 메소드. binarySearch는 배열의 범위에서 중간값을 계속 찾아나가며 값의 범위를 좁히면서 찾는 방식이기 때문에 정렬을 수행한 후에 실행해야한다.
- object를 정렬하고 싶다면 Comparable 이라는 interface를 생성해줘야한다. Comparable interpace를 생성함으로써 object를 기준을 갖고 정렬할 수 있음.
- Comparable에 있는 compareTo()를 오버라이딩 하여 기준을 정할 수 있다.
@Override
public int compareTo(Object o){
		Item d = (Item)o; //파라미터로 들어온 Object o 를 Item으로 형변환 시킨 것
		return this.name.compareTo(d.name);} // this.name은 String 타입이다. String 타입도 compareTo라는 메소드를 갖고 있어서 이렇게 작성 가능하다.
// this.name 과 compareTo(d.name)을 비교하는것
@Override
public int compareTo(Object o){
		Item d = (Item)o;
		return this.price - d.price; //지금 내 값이 크면 양수 들어온 값이 크면 음수 같으면 0
//람다 표현식의 정렬
Arrays.sort(items, (item1, item2) -> item1.getName().compareTo(item2.getName()));

## 명령 행 아규먼트(Command-Line Arguments)
- main 메소드는 JVM이 실행하는 메소드이다
- JVM이 main 메소들르 실행할 때 String[]을 아규먼트로 넘겨준다는 것을 의미한다.

## 제한없는 아규먼트
리턴 타입 메소드이름(타입... 변수명){
......
}
- 가변적인 아규먼트로 값을 받을수 있음 배열로 인식.

## GenericBox
- 모든 타입을 담을수 있는 Object박스를 만든다면 꺼낼 때마다 형변환을 하는 수고스러움이 생김. 이 것을 개선한것이 GenericBox.
- Object 타입으로 받으면 모든 후손을 받을 수는 있지만 꺼낼때 형변환을 해줘야함. 하지만 GenericBox는 애초에 타입 자체를 나중에 지정할 수 있도록 해주기 때문에 꺼낼때 형변환할 필요 없음.
- 제네릭은 클래스 이름 뒤나, 메소드의 리턴타입 앞에 붙을 수 있음. 밑의 예시는 generic의 문법중 하나의 예시일 뿐.
public class GenericBox<T> {
    private T t;
    public void set(T obj){
        this.t = obj;
    }

    public T get(){
        return this.t;
    }
}
public class GenericBoxMain {
    public static void main(String[] args) {
        GenericBox<String> genericBox = new GenericBox<>();
        genericBox.set("kim");
        String str = genericBox.get();
        System.out.println(str.toUpperCase());

        GenericBox<Integer> intBox = new GenericBox<>();
        intBox.set(new Integer(5));
        Integer intValue = intBox.get();
        System.out.println(intValue);

    }
}

## 컬렉션 프레임워크(Collection Framework)
- Java Collections Framework 라고 불리워지는 Collections API는 Java 2부터 추가 된 자료 구조 클래스 패키지를 말한다
- 자료(Data)를 다룰 때 반드시 필요한 클래스의 모음으로써 JAVA프로그래머라면 꼭 숙지하고있어야만한다.

## java.util.Collection 인터페이스
- java.util.Collection 인터페이스는 컬렉션 프레임워크에서 가장 기본이 되는 인터페이스이다.
- 해당 인터페이스는 순서를 기억하지 않고, 중복을 허용하여 자료를 다루는 목적으로 만들어졌다.

## java.util.List 인터페이스
- java.util.List 인터페이스는 순서가 중요한 자료를 다룰때 사용하는 인터페이스이다.
- Collection을 상속받음으로써 Collection이 가지고 있는 add(), size(), iterator()메소드를 사용할 수 있다.
- 해당 인터페이스는 순서를 알고 있다고 가정하기 때문에 특정 순서로 저장된 자료를 꺼낼 수 있는 get(int) 메소드를 가지고있다.

## java.util.Set 인터페이스
- java.util.Set 인터페이스는 중복을 허용하지 않는 자료를 다룰 때 사용하는 인터페이스이다.
- 중복을 허용하지 않는다는것은 같은 값을 저장할 수 없다는 것이다.
- 같은값을 여러번 추가하여도 마지막 값 하나만 저장됨을 의미한다.
- Set 인터페이스에 저장되는 객체들은 유일한 값을 가져야 하므로 hash 알고리즘이 사용된다. 그러므로 유일한 값을 갖게 하기 위해 Object가 가지고 있는 equls()메소드와 hashCode() 메소드를 오버라이딩 해야한다.

## java.util.Iterator 인터페이스
- java.util.lterator 인터페이스는 자료구조에서 자료를 꺼내기 위한 목적으로 사용되는 인터페이스 이다.
- iterator 패턴을 구현하고 있다.

## java.util.Map 인터페이스
- java.util.Map 인터페이스는 키와 값을 함께 저장하기 위한 목적으로 만들어진 인터페이스이다.
- 같은 Key값으론 하나의 값만 저장할 수 있다.
- 같은 키 값이 있을때에는 마지막으로 실행된 값으로 덮어 씌워진다.