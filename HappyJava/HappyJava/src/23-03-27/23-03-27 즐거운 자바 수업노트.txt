# 23-03-27 (인프런 즐거운 자바)
---
## 타입의 변환
- 정수는 실수에 포함되기 때문에 묵시적 타입변환(자동 타입 변환)이 일어나서 대입가능.
- 정수에 실수타입 변수를 저장하면 컴파일 오류가 발생.
- 정수로 실수타입을 저장하려면 명시적 타입 변환이 이루어져야함.
- 크기가 큰 타입은 작은 타입을 저장 할 수 있음. 반대 경우는 크기가 넘칠 경우 오버 플로우 발생
- 명시적 타입 변환을 할 땐  오버 플로우가 발생하지 않도록 조심해야함.
int i1 = (int)25.6f; //주의사항은 소수점 이하 부분은 잘림

## 문자타입
- 문자는 작은 따옴표로 묶인 문자 하나를 말함.
- 문자는 2byte 크기를 가지며 유니코드 값을 가짐.
- 큰 따옴표로 묶여있는것은 문자열(String)이라고 함.
- 유니코드 97번째 값은 a 65번째 값은 A

## 비트 연산자
- bit는 컴퓨터가 다루는 정보의 최소단위
- bit가 8개 모인 byte는 정보를 처리할 수 있는 최소 단위
- 1bit 만을 저장할 수는 없음. byte단위로 저장하고 처리함.
- 1byte는 bit 00000000 ~11111111 까지 값을 표현 할 수 있음
- 1byte를 정수로 표현하면 0 ~254까지 표현 가능 (부호비트 없다고 가정)
- 1byte를 16진수로 표현하면 00부터 FF까지 표현 가능 4비트는 0부터 15까지 표현 가능하기 때문에 8비트인 1byte는 0 ~ FF가 아니라 00 ~ FF까지 표현 가능함.
- 비트연산자는 비트 단위로 논리연산을 할 때 사용하는 연산자
- 비트연산자의 종류는 &, |, ^, ~, <<, >>, >>> 이 있음
- &는 and, |는 or , ^는 XOR, ~는 not임. 논리연산자는 부정이 !였음 이것이 차이점
- <<는 좌측 시프트, >>는 우측 시프트, >>>는 우측 양수화 시프트
- <<, >> 는 bit만큼 좌측으로 또는 우측으로 보내는 것
int a = 4;
int b = a>>1; // 2^1 으로 나눈다.
int c = 4;
int d = c<<1; // 2^1 으로 곱한다.
- >>는 부호비트를 제외 하고 오른쪽으로 이동시키지만 >>>는 부호비트 포함 하고 오른쪽으로 이동시키기에 무조건 양수가 나옴.

## 조건문
- 문법
    if(조건문1){
    		조건문이 참일 경우 실행되는 블록
    }else if(조건문2){
    		조건문2가 참일 경우 실행되는 블록
    }
    else{
    		조건문들이 거짓일 경우 실행되는 블록
    }    
- 조건문의 결과는 반드시 boolean 형으로 결과가 나와야함
- if 문에 중괄호가 없을경우 다음문장만 조건에 만족할 경우 실행함.

## 삼항연산자
- 문법
    int a = 10;
    int value = (a > 5) ? 20 : 30;
    //(조건문) ? true일때 값 : false 일때 값;    

## 조건문 switch
- switch문은 제어문 중에 하나이고 경우에 따라 if 문보다 가독성이 좋을 수 있음.
- 문법
    public class SwitchExam {
        public static void main(String[] args){
            int num = 4;
            switch(num){
                case 1:
                    System.out.println("1입니다.");
                    break;
                case 2:
                    System.out.println("2입니다.");
                    break;
                case 3:
                    System.out.println("3입니다.");
                    break;
                default:
                    System.out.println("1, 2, 3이 아닙니다.");
            }
        }
    }
    - break; 문장이 없으면 조건을 만족하는 case 문과 그 다음 모든 case 문을 실행하게됨.

## while
- 탈출 조건식이 false를 반환할 때 while 문은 종료됨
- 문법
    변수의 초기화
    while (탈출 조건식){
    		탈출 조건식이 참일 경우 실행되는 코드;
    		변수의 증감식;
    }  
- continue를 만나게 되면 continue 아래 문장은 무시하고 반복함

## do/wihle문
- do while 문은 무조건 한번은 실행됨
- 문법
    변수의 초기화
    do {
    		탈출 조건식이 참일 경우 실행되는 코드;
    		변수의 증감식;
    }while (탈출조건식);  
- 사용자에게 한번은 값을 입력 받고 싶을 때 사용. 입력 받은 값이 원하지 않는 값일경우 바로 종료 되게 하고 싶을 때 사용

## 반복문 for
- 문법
    for (변수의 초기화; 탈출 조건식; 증감식){
    		탈출 조건식이 참인 경우 실행되는 부분.
    }    
- 중첩 반복문을 빠져 나갈땐 label을 사용해야함
public class LabelExam {
    public static void main(String[] args){
        outter:
        for(int i=0; i<3; i++){
            for(int k = 0; k<3; k++){
                if( i==0 && k == 2)
                    break outter;
                System.out.println(i+", "+k);
            }
        }
    }
}
- continue 는 아래의 문장을 무시 한 후 라벨로 돌아가 반복문 실행함.