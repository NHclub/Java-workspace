# 23-03-29 (인프런 즐거운 자바)
---
## private 생성자
- 자바는 컴파일할 때 사용자가 생성자를 만들지 않았을 경우 자동으로 생성자를 만들어준다.
- public이 아닌 private으로 접근제한자를 설정하면 다른 클래스에서 인스턴스 생성이 불가능하다.
- 인스턴스를 생성하지 못하기에 static 하지 못한 메소드는 사용할 수 없다. static한 메소드만 사용 가능함.
- 인스턴스가 생성되면 메모리에 인스턴스가 올라가면서 메모리 차지를 하기 때문에 메모리를 절약하기 위해 static한 메소드만 만들고 private로 인스턴스 생성을 막은것.

## 클래스 메소드 vs 인스턴스 메소드
- static이 붙은 메소드는 클래스 메소드, static이 붙지 않은 메소드는 인스턴스 메소드라고 함.
- 인스턴스 메소드와 클래스 메소드 이해하려면 필드를 잘 이해해야함.
- String 클래스는 너무 자주 사용하다보니 new로 인스턴스를 사용하지 않아도 큰 따옴표 만으로 사용할 수 있게 해줌.

## 필드(field)
- 클래스가 가지는 속성을 자바에선 필드라고 함
- 다른 언어에서는 멤버변수라고 말하는 경우도 있음
- static이 사용되는 필드는 클래스 필드, 없으면 인스턴스 필드라고 함.

## 필드 선언 방법
- 선언 방법: [접근제한자] [static] [final] 타입 필드명 [=초기값];
- 접근제한자는 public, protected, private, 생략(default)이 올 수 있음
- 타입은 기본형(boolean, byte, char, short, int, long, float, double)과 참조타입(class, 인터페이스, 배열) 등이 나올 수 있음
- 초기값이 없을 경우에는 참조형일 경우 null로 boolean 형일 경우는 false로 나머지 기본형은 모두 0으로 초기화 됨
//필드 선언 예제
String name; // String(참조타입) name 변수는 아무것도 참조 하지 않으니 null값을 가짐, 접근제한자가 생략되었으니 default로 설정됨.
String address = "경기도 고양시"; //String 참조타입에 변수 address는 "경기도 고양시"라는 문자열 인스턴스를 참조하고 있음, 접근제한자가 생략되었으니 default로 설정됨.
public int age = 50; //int age는 기본형 타입으로 메모리 4바이트의 저장공간이 잡히고 그 안에 50을 저장하게 됩니다.
protected boolean flag; // boolean flag는 기본형 타입으로 메모리 1바이트를 차지합니다. 아무값도 넣어주지 않으면 false를 가지게 됩니다.
- 기본형 타입은 아무것도 참조하지 않으면 default 값이 출력됨. 참조형 타입은 null값이 출력됨.

## class 필드 (static 필드, 클래스 변수)
- 자바에서 main 메소드를 실행하면 JVM이 CLASSPATH를 통해 인스턴스를 생성할 때, class가 있는지 확인한 후 그 정보들을 불러와서 메모리에 올림. 그 때 static한 필드는 정적영역에 따로 저장이 됨.
- static한 필드는 인스턴스별로 갖고 있는 것이 아니라 정적 영역에서 따로 관리하기에 나중에 값을 변경하면 인스턴스 전부가 바뀜
- static한 필드는 인스턴스를 생성하지않아도 클래스 타입만 작성해도 따로 메모리에 올라감 그래서 static한 필드나 메소드를 실행할때 class명.필드명 형식으로 사용 하는것이 좋음
- static필드를 클래스 변수라고도 말함
- static이 붙어 있지 않은 필드는 인스턴스필드, static이 붙은 필드는 클래스 필드라고 함
- 클래스 필드는 static 블록에서 초기화 가능

## class method
- class 메소드(static 메소드)는 인스턴스 필드를 사용하지 못함. class 필드(static 필드)만 사용 가능 
그 이유는 메모리에 생성되는 시점과 영역이 다르기 때문입니다. class 메소드는 사용하는 동시에 class 필드와 메소드를 static 메모리 영역에 생성하지만 인스턴스 필드는 따로 인스턴스를 생성해야 heap 메모리 영역에 생성되기 때문입니다. 서로 관리하는 메모리 영역이 다릅니다.
- JVM은 클래스 정보를 읽어 들일 때 클래스가 갖고 있는 클래스필드와 클래스 메소드를 사용 가능하도록 메모리에 올리게 됨
ex>
Person.count;:
Person이라는 클래스의 static count필드를 불러오면서 static한 필드, 메소드들을 메모리에 올림
인스턴스 필드나 인스턴스 메소드는 인스턴스를 생성 해야만 메모리에 올라감

## 자바 실행순서
- [Hello2.java](http://Hello2.java) 소스를 컴파일하고 java로 실행을 하면 JVM은 CLASSPATH에서 Hello2 클래스를 찾음. Hello2 클래스를 읽어 들여서 정보를 메모리에 올리게 됨. 클래스 필드나 메소드는 실행 가능한 상태가 되도록 메모리에 올림
- main 메소드가 실행 되기 전에 static을 초기화 하는 static 블록 안의 코드가 먼저 실행이 됨.

## 자바의 메모리영역 가벼운 설명
- new 연산자를 사용할 때마다 메모리에 인스턴스가 생성된다.
- 인스턴스는 더 이상 참조되는 것이 없을 때, 나중에 가비지컬렌션이 된다.
- static한 필드는 클래스가 로딩될 때 딱 한번 메모리에 올라가고 초기화 된다.
- 인스턴스 메소드는 인스턴스를 생성하고나서 레퍼런스 변수를 이용해 사용할 수 있다.
- 클래스 메소드는 클래스명.메소드명() 으로 사용가능하다.
- 메소드 안에 선언된 변수들은 메소드가 실행될 때 메모리에 생성되었다가, 메소드가 종료될 때 사라진다.

## 추상화
- 중요한 것은 남기고, 불필요한 것은 제거한다.

## 캡슐화(encapsulation)
- 관련된 것을 잘 모아서 가지고 있는 것을 캡슐화(encapsulation)라고 말합니다. 관련된 것을 잘 모아서 가지고 있을수록 응집도(Cohesion)가 높다고 표현한다.

## 좋은객체 vs 나쁜객체
- 좋은 객체는 응집도는 높고 결합도(Coupling)는 낮다.
- 객체를 만들 땐 관련된 기능을 잘 모아서 갖고 있어야 하고, 객체와 객체간의 결합도는 낮춰야 합니다.

## 다형성(Polymorphism)
- 프로그램 언어의 다형성은 그 프로그래밍 언어의 자료형 체계의 성질을 나타내는 것으로, 프로그램 언어의 각 요소들(상수, 변수, 식, 오브젝트, 함수, 메소드 등)이 다양한 자료형(type)에 속하는 것이 허가되는 성질을 가리킨다. 반댓말은 단형성으로, 프로그램 언어의 각 요소가 한가지 형태만 가지는 성질을 가리킨다.

## 다형성 - 메소드 오버로딩(Overloading)
- 메소드의 이름은 같고 매개변수의 갯수나 타입이 다른 메소드를 정의하는 것을 의미한다.
- 리턴값만을 다르게 갖는 오버로딩은 작성 할 수 없다.

## 패키지 Pachage
- 클래스는 패키지를 이용하여 관련된 클래스들을 관리한다. 자바에서 패키지는 폴더와 거의 같은 기능을 제공한다고 생각하면 된다.

## 패키지 이름 규칙
- 패키지 이름은 보통 도메인 이름을 거꾸로 적은 후에 포르젝트 이름등을 붙여서 만들게 된다.