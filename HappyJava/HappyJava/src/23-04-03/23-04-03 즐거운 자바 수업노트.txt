# 23-04-03 (인프런 즐거운 자바)
---
## 추상클래스
- 추상클래스가 가장 많이 쓰이는 디자인 패턴은 템플릿 메소드 패턴
- 추상클래스를 상속받으면 반드시 오버라이딩을 해줘야함

## 부모가 될 수 없는 클래스
- 상속을 금지 시키려면 클래스를 정의할 때 final 키워드를 사용한다.
- public final class 클래스명 {…}
- 자바에서 ==은 같은 값을 참조하냐? 라는 뜻 값이 같냐? 라는 뜻이 아님
- String 이 갖고 있는 메소드중 equals() 메소드를 통해서 값이 같은지 비교 가능

## 접근 제한자
| 접근제한자 | 클래스 내부 | 동일 패키지 | 하위 클래스 | 그 외 |
| --- | --- | --- | --- | --- |
| public | O | O | O | O |
| protected | O | O | O | X |
| default | O | O | X | X |
| private | O | X | X | X |

## 인터페이스
- 어떤 기능을 만들어야 할지부터 고민하고 만들어야 할 기능들을 관련된 것끼리 묶은후 이름을 지어준다.
- 작성 문법
[public] interface 인터페이스이름 {...}
//예시
public interface User {...}
- 인터페이스이름은 Upper CamelCase(첫 글자가 대문자)로 작성된다.
- interface도 확장자가 .java파일로 작성한다.
- 인터페이스의 모든 필드는 public static final이어야 하며, 모든 메소드는 public abstract이어야 한다.(java 7까지는) final, abstract를 생략하면 자동으로 붙는다.
- java8 부터는 디폴드(default) 메소드와 정적(static) 메소드도 선언이 가능하다.

## 인터페이스의 default method (JDK 8에 추가된 메소드)
- A라는 사용자가 메소드가 3개 선언된 interface를 작성한 후 외부에 공개를 하였다. (라이브러리로 제공)
- 여러 사용자들이 해당 인터페이스를 이용해 구현을 하였다.
- A라는 사용자는 인터페이스에 1개의 메소드가 추가로 더 있는게 좋다고 판단하였다. 그래서 메소드를 추가하였다.
- 여러 사용자들은 라이브러리가 업데이트 된 줄 알고 업데이트 하였다. 무슨 일이 벌어질까? 
인터페이스의 모든 메소드는 추상메소드이기 때문에 그 인터페이스를 사용하고 있던 사람들은 전부 컴파일 에러가 난다. 추상메소드는 무조건 구현해야하기 때문이다. 그래서 이 문제를 해결하기 위해 나온것이 default method 이다.
- default method 는 인터페이스가 메소드가 추가 될 때마다 구현해야되는 문제를 해결하기 위해 미리 구현한 메소드를 제공하는것.
- static method는 인터페이스를 구현한 클래스가 없어도 사용 가능하다.